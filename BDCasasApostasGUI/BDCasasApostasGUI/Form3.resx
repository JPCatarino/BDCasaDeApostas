<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AElFTkSuQmCC
</value>
  </data>
</root>